"use strict";angular.module("tpsApp",["ngCookies","ngResource","ngSanitize","ngRoute","restangular","tokenauth"]).config(["$routeProvider",function(a){a.when("/dashboard",{templateUrl:"views/dashboard.html",controller:"DashboardCtrl"}).when("/reports",{templateUrl:"views/reports.html",controller:"ReportsCtrl"}).when("/about",{templateUrl:"views/about.html",controller:"AboutCtrl"}).otherwise({templateUrl:"views/main.html",controller:"MainCtrl"})}]).config(["RestangularProvider",function(a){a.setBaseUrl("http://localhost:8080/api/api")}]).config(["AuthProvider",function(a){a.setUrl("http://localhost:8080/tps/api/token")}]),angular.module("tpsApp").controller("DashboardCtrl",["$scope","PersonService","$location",function(a,b,c){b.getPerson().then(function(){console.log("***********************************************")},function(){console.error("DashboardCtrl::initialize - Root scope does not define user, going back to main."),c.path("/main")}),a.$on("onLoggedOut",function(){console.info("EVENT: DashboardCtrl::onLoggedOut()"),c.path("/main")})}]),angular.module("tpsApp").controller("RegisterCtrl",["$scope","Restangular","$location",function(a,b,c){a.register=function(){console.log("Register, email: %s",a.email);var d=b.one("registration").get({email:a.email,password:a.password});return d.then(function(b){console.log("Successfully registered user"),a.token=b,c.path("/dashboard"),toastr.success("Registration succeeded, moving to dashboard")},function(a){console.error("Failed to register user, error: %s",a),toastr.error("Registration failed")}),d}}]),angular.module("tpsApp").controller("LoginCtrl",["$scope","$rootScope","Restangular","$location","PersonService",function(a,b,c,d,e){var f=!1;a.login=function(){console.log("login(username [%s], password [%s])",a.username,a.password),e.login(a.username,a.password).then(function(c){console.log("LoginCtrl::login - Successfully authenticated, user: %s",a.username),b.user=c,d.path("/dashboard")},function(a){console.error(a),b.user=null,d.path("/main")})},a.register=function(){d.path("/register")},a.logout=function(){e.logout(),a.user=null},a.settings=function(){},a.profile=function(){},a.$on("onLoggedOut",function(){console.info("EVENT: onLoggedOut()"),b.user=null}),f&&(a.username="jim@arnellconsulting.com",a.password="password",a.login())}]),angular.module("tpsApp").controller("DashboardProjectsCtrl",["$scope","$rootScope","$resource","$location","TimerService","PersonService",function(a,b,c,d,e,f){console.log("Initiating DashboardProjectsCtrl"),a.activeProject=null,a.project={},a.projects={},e.reloadProject(),a.showNewProject=function(){console.log("DashboardProjectsCtrl::showNewProject"),$("#projectModal").modal("show")},a.createProject=function(){console.log("DashboardProjectsCtrl::updateProject(projectName: [%s])",a.project.name),e.updateProject(a.project).then(function(){console.log("DashboardProjectsCtrl::updateProject(projectName -Successfully created project"),$("#projectModal").modal("hide")},function(a){console.error("DashboardProjectsCtrl::updateProject(projectName - Failed to create project: %s",a)})},a.startTimer=function(a){console.log("DashboardProjectsCtrl::startTimer -  project id: %d",a.id),e.stopTimer().then(function(){e.startTimer(a)},function(){e.startTimer(a)})},a.stopTimer=function(){e.stopTimer()},a.createProjectFromScope=function(){console.log("DashboardProjectsCtrl::createProjectFromScope(name: %s, id: %d)",a.project.name,a.project.id),a.updateProject(a.project),a.project={}},a.updateProject=function(a){e.updateProject(a)},a.removeProject=function(a){e.removeProject(a)},a.restoreProject=function(a){console.log("createProjectFromScope:::restoreProject(id: %d, name: %s)",a.id,a.name)},a.getById=function(a,b){return console.log("createProjectFromScope::getById([%d])",b),_(a).find({id:b})},a.$on("onProjectUpdated",function(b,c){console.info("EVENT: onProjectUpdated([%d])",c.id);var d=a.getById(a.projects,c.id);d?(d.active=c.active,d.name=c.name,d.rate=c.rate):console.error("DashboardProjectsCtrl::onProjectUpdated - Failed to find matching project in controller, add it?")}),a.$on("onProjectsRefreshed",function(b,c){console.log("EVENT: DashboardProjectsCtrl::onProjectsRefreshed(size [%d])",c.length);var d=f.getActiveProjectId();a.projects=c,_(a.projects).each(function(a){a.id===d&&(a.active=!0)})}),a.$on("onLoggedOut",function(){console.info("EVENT: DashboardProjectsCtrl::onLoggedOut()"),a.projects={}})}]),angular.module("tpsApp").controller("DashboardTimeEntriesCtrl",["$scope","$rootScope","$resource","$filter","$q","TimerService",function(a,b,c,d,e,f){console.log("Initiating DashboardTimeEntriesCtrl"),a.date=new Date,a.selectedDate=(new Date).toISOString().substring(0,10),a.timeEntries={},f.getTimeEntries(),a.removeTimeEntry=function(a){console.log("DashboardTimeEntriesCtrl::removeTimeEntry(%d)",a.id),f.removeTimeEntry(a)},a.editTimeEntry=function(b){console.log("DashboardTimeEntriesCtrl::editTimeEntry"),a.timeEntry=b,b.projects=f.getProjects(),$("#timeEntryModal").modal("show")},a.findTimeEntryById=function(b){var c=$.grep(a.timeEntries,function(a){return a.id===b})[0];return c},a.getEndTime=function(a){var b="In Progress";return null!==a.endTime&&(b=d("date")(a.endTime,"HH:mm:ss")),b},a.getDuration=function(a){var b="f";if(a.endTime){var c=(a.endTime-a.startTime)/1e3,d=Math.floor(c/3600),e=Math.floor((c-3600*d)/60),f=c-3600*d-60*e;10>d&&(d="0"+d),10>e&&(e="0"+e),10>f&&(f="0"+f),b=d+":"+e}return b},a.$on("onTimeEntriesRefreshed",function(b,c){console.log("EVENT: DashboardTimeEntriesCtrl::onTimeEntriesRefreshed(count [%d])",c.length),a.timeEntries=c}),a.$on("onTimeEntryUpdated",function(a,b){console.log("EVENT: DashboardTimeEntriesCtrl::onTimeEntryUpdated(id [%d])",b.id)}),a.$on("onTimeEntryRemoved",function(a,b){console.log("EVENT: DashboardTimeEntriesCtrl::onTimeEntryRemoved(id [%d])",b.id)}),a.$on("onLoggedOut",function(){console.info("EVENT: DashboardTimeEntriesCtrl::onLoggedOut()"),a.timeEntries=null}),a.$watch("onSelectedDate",a.onSelectedDate),a.onSelectedDate=function(){console.log("WATCH: updateTimeEntries")}}]),angular.module("tpsApp").service("TimerService",["Restangular","$rootScope","$q","PersonService",function(a,b,c,d){var e,f,g=a.all("project"),h=[],i=!1,j=a.all("timeEntry"),k=(new Date).toISOString().substring(0,10);return e={reloadProject:function(){console.log("TimerService::reloadProject");var a=g.getList();return a.then(function(a){console.log("TimerService::reloadProject - List retrieved from backend, size: %d",a.length),h=a,i=!0;var c=d.getActiveProjectId();return _(h).each(function(a){a.active=a.id===c?!0:!1}),console.log("BROADCAST: onProjectsRefreshed"),b.$broadcast("onProjectsRefreshed",h),a}),a},updateProject:function(a){var d=c.defer();return a.id?(console.log("TimerService::updateProject"),a.put().then(function(c){console.log("TimerService::updateProject - Backend updated successfully"),console.log("BROADCAST: - onProjectUpdated (%d)",a.id),b.$broadcast("onProjectUpdated",a),d.resolve(c)},function(a){d.reject(a)})):(console.log("updateProject - creating new entry"),g.post(a).then(function(a){console.log("Updated project successfully at backend. New id is: %s",a.id),h.push(a),b.$broadcast("onProjectUpdated",a),d.resolve(a)},function(a){d.reject(a)})),d.promise},removeProject:function(a){console.log("TimerService::remove(name: [%s], id: [%d])",a.name,a.id),a.remove().then(function(){console.log("Project deleted from backend");var b=_.indexOf(h,a);console.log("Removing project at index %d",b),h.splice(b,1)})},getProject:function(a){console.log("TimerService::getProject(id [%d])",a);var b=_.find(h,function(b){return b.id===a});return b},getProjects:function(){return h},setActive:function(a,b){console.log("TimerService::setActive - %d",b);var c=this.getProject(a.id);c?c.active=b:console.error("TimerService::setActive - Failed to find project to set as active")},setSelectedDate:function(a){k=a},getSelectedDate:function(){return k},getTimeEntries:function(){console.log("TimerService::getTimeEntries");var a=j.getList();return a.then(function(a){return console.log("TimerService::getTimeEntries - List retrieved from backend, size: %d",a.length),f=a,console.log("BROADCAST onTimeEntriesRefreshed"),b.$broadcast("onTimeEntriesRefreshed",f),f}),a},createTimeEntry:function(a){return j.post(a)},updateTimeEntry:function(a){console.log("TimerService::updateTimeEntry(id: [%d])",a.id);var d=c.defer(),f=e.findTimeEntryById(a.id);if(f)f.put().then(function(a){console.log("TimerService::updateTimeEntry - OK"),b.$broadcast("onTimeEntryUpdated",a),d.resolve(a)},function(){var a="Failed to update the time entry";console.error("TimerService::updateTimeEntry - FAILED [%s]",a),d.reject(a)});else{var g="Failed to find time entry";console.error("TimerService::updateTimeEntry - FAILED [%s]",g),d.reject(g)}return d.promise},removeTimeEntry:function(a){var c=a.id,d=this.findTimeEntryById(c),e=_.indexOf(f,d);console.log("removeTimeEntry::removeTimeEntry(%s)",c);var g=d.remove();return g.then(function(){console.log("removeTimeEntry::removeTimeEntry - OK"),f.splice(e,1),console.log("BROADCAST: onTimeEntryRemoved(id [%d]",d.id),b.$broadcast("onTimeEntryRemoved",d)}),d.disable=!0,g},findTimeEntryById:function(a){return _(f).find({id:a})},startTimer:function(a){console.log("timerService::startTimer");var g=c.defer();return d.getPerson().then(function(c){var h={person:c,project:a,startTime:$.now()};e.createTimeEntry(h).then(function(c){console.log("timerService::startTimer - Time entry created at backend(id [%d]",c.id),c.active=!0,e.setActive(a,!0),f.push(c),d.setActiveTimeEntry(c).then(function(){console.log("timerService::startTimer - OK"),g.resolve(c),console.log("BROADCAST: onTimeEntryUpdated"),b.$broadcast("onTimeEntryUpdated",c)},function(a){console.error("timerService::startTimer - Failed to setActiveTimeEntry %s",a),g.reject(a)})},function(a){return console.error("timerService::startTimer - Failed to create time entry. %s",a),g.reject(a)})},function(a){return console.error("timerService::startTimer - Failed to get logged in user. %s",a),g.reject(a)}),g.promise},stopTimer:function(){console.log("timerService::stopTimer");var a=c.defer();return d.getPerson().then(function(b){var c=b.activeTimeEntry,f=c?c.project:null;return c&&f?(console.log("timerService::stopTimer - Got an active project"),c.endTime=$.now(),e.updateTimeEntry(c).then(function(){console.log("timerService::stopTimer - Time entry updated at backend"),d.setActiveTimeEntry(null).then(function(){console.log("timerService::stopTimer - OK"),a.resolve()},function(b){console.error(b),a.reject(b)})},function(b){console.error("timerService::stopTimer - Failed to update time entry"),a.reject(b)}),void 0):(console.log("timerService::stopTimer - This person has no active timer"),a.resolve(null))},function(b){return console.error("timerService::stopTimer - Failed to get logged in person"),a.reject(b)}),a.promise}}}]),angular.module("tpsApp").service("PersonService",["$rootScope","$q","Restangular",function(a,b,c){var d,e=null,f=null;return d={login:function(g,h){console.log("PersonService::login");var i=b.defer();return f=c.one("authenticate").get({username:g,password:h}).then(function(b){console.log("PersonService::login - Received authentication token for user: %s",b.token),f=b.token,c.setDefaultHeaders({"Auth-Token":f}),d.getPerson().then(function(b){e=b,i.resolve(e),console.log("BROADCAST: onLoggedIn (id [%d])",e.id),a.$broadcast("onLoggedIn",e),a.token=f,a.person=e},function(a){return i.reject(a)})},function(a){return console.error("PersonService::login - Login failed"),e=null,f=null,i.reject(a)}),i.promise},logout:function(){console.log("Logging out user [%s]",e.username),e=null,f=null,c.setDefaultHeaders({}),console.log("BROADCAST: onLoggedOut ()"),a.$broadcast("onLoggedOut")},getPerson:function(){console.log("PersonService:getPerson");var a=b.defer();if(e)console.log("PersonService:getPerson - OK (local)"),a.resolve(e);else{var d=c.one("person",1).get();d.then(function(b){return console.log("PersonService:getPerson - OK (backend)"),e=b,a.resolve(b)},function(){var b="Failed to load the person from backend";return console.error("PersonService:getPerson - %s",b),a.reject(b)})}return a.promise},setActiveTimeEntry:function(c){var d=b.defer();console.log("PersonService:setActiveTimeEntry(id [%d])",c?c.id:null);var f=e.activeTimeEntry?e.activeTimeEntry.project:null,g=c?c.project:null;return e.activeTimeEntry=c,e.put().then(function(b){return f?(f.active=!1,console.log("BROADCAST: onProjectUpdated (id [%d])",f.id),a.$broadcast("onProjectUpdated",f)):console.log("PersonService:::setActiveTimeEntry - No project stopped"),g?(console.log("BROADCAST: onProjectUpdated (id [%d])",g.id),g.active=!0,a.$broadcast("onProjectUpdated",g)):console.log("PersonService:::setActiveTimeEntry - No project started"),d.resolve(b)},function(a){return console.error("PersonService::setActiveTimeEntry failed. %s",a),d.reject(a)}),d.promise},getActiveTimeEntry:function(){var a=null;return e&&e.activeTimeEntry&&(a=e.activeTimeEntry),a},getActiveProjectId:function(){var a=-1;return e&&e.activeTimeEntry&&e.activeTimeEntry.project?(console.log("PersonService::getActiveProjectId(id [%d])",e.activeTimeEntry.project.id),a=e.activeTimeEntry.project.id):console.log("PersonService::getActiveProjectId - No active project"),a}}}]),angular.module("tpsApp").constant("TpsConstants",42),angular.module("tpsApp").filter("dateFilter",function(){return function(a,b){var c=new Date(b);return _.filter(a,function(a){var b=new Date(a.startTime);return c.toLocaleDateString()===b.toLocaleDateString()})}}),angular.module("tpsApp").controller("MainCtrl",["$scope",function(){}]),angular.module("tpsApp").controller("AboutCtrl",["$scope",function(a){a.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}]),angular.module("tpsApp").controller("ReportsCtrl",["$scope",function(a){a.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}]);
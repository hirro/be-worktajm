<?xml version="1.0" encoding="UTF-8"?>
<flow
  xmlns="http://www.springframework.org/schema/webflow"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"
  start-state="isRequestValidState">
  <input
    name="user"
    required="false" />
  <input
    name="realm"
    required="false" />
  <on-start>
    <evaluate
      expression="authenticationService.createAuthentication(flowRequestContext.externalContext.sessionMap.loginParameters)"
      result="flowScope.authentication" />
  </on-start>
  <decision-state id="isRequestValidState">
    <if
      test="authentication.isRequestValid()"
      then="isUserNameProvidedStates"
      else="invalidRequestErrorState" />
  </decision-state>
  <decision-state id="isUserNameProvidedStates">
    <if
      test="authentication.isUserNameProvided()"
      then="isProvidedUserNameValidState"
      else="isUserNameRequiredState" />
  </decision-state>
  <decision-state id="isUserNameRequiredState">
    <if
      test="authentication.isUserNameRequired()"
      then="userNameRequiredErrorState"
      else="enterUserNameState" />
  </decision-state>
  <view-state
    id="enterUserNameState"
    model="authentication">
    <binder>
      <binding property="username" />
    </binder>
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="isEnteredUserNameValidState" />
  </view-state>
  <decision-state id="isProvidedUserNameValidState">
    <if
      test="authenticationService.lookupUser(authentication)"
      then="checkAuthenticationMechanism"
      else="userNameProvidedButInvalidErrorState" />
  </decision-state>
  <decision-state id="isEnteredUserNameValidState">
    <if
      test="authenticationService.lookupUser(authentication)"
      then="checkAuthenticationMechanism"
      else="enteredUserNameInvalidErrorState" />
  </decision-state>
  <action-state id="checkAuthenticationMechanism">
     <evaluate expression="authentication.getMechanism()"/>
     <transition on="SIM" to="showSimLoginProgressState"/>
     <transition on="OTP" to="enterOtpState"/>
     <transition on="UNDEFINED" to="invalidAuthenticationMechanismErrorState"/>
     <transition on="WPKI" to="invalidAuthenticationMechanismErrorState"/>
  </action-state>
  <view-state
    id="enterOtpState"
    model="authentication">
    <binder>
      <binding property="otp" />
    </binder>
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="validateOtpState" />
  </view-state>
  <view-state
    id="showSimLoginProgressState"
    model="authentication">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="isSimChallengeValid" />
  </view-state>
  <action-state id="isSimChallengeValid">
    <evaluate expression="authenticationService.authenticate(authentication)"/>
    <transition on="PENDING" to="showSimLoginProgressState"/>
    <transition on="AUTHENTICATED" to="authenticationSucceededState"/>
    <transition on="DENIED" to="otpInvalidErrorState"/>
    <transition on="LOCKED" to="accountLockedOutErrorState"/>
    <transition on="FAILED" to="simAuthenticationTimedOutErrorState"/>
    <transition on="OTP_EXPIRED" to="authenticationSucceededState"/>
  </action-state>  
  <action-state id="validateOtpState">
    <evaluate expression="authenticationService.authenticate(authentication)"/>
    <transition on="PENDING" to="enterOtpState"/>
    <transition on="AUTHENTICATED" to="authenticationSucceededState"/>
    <transition on="DENIED" to="otpInvalidErrorState"/>
    <transition on="LOCKED" to="accountLockedOutErrorState"/>
    <transition on="FAILED" to="otpInvalidErrorState"/>
    <transition on="OTP_EXPIRED" to="otpExpiredErrorState"/>
  </action-state>
  <decision-state id="isLockedOutState">
    <if
      test="authenticationService.isLockedOut(authentication)"
      then="errorState"
      else="enterOtpState" />
  </decision-state>
  <view-state id="authenticationSucceededState" view="authenticationSucceeded">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="success" />
  </view-state>
  <!-- Error states -->
  <view-state id="requestUnauthorizedErrorState">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="errorState" />
  </view-state>
  <view-state id="invalidRequestErrorState">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="errorState" />
  </view-state>
  <view-state id="userNameRequiredErrorState">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="errorState" />
  </view-state>
  <view-state id="sessionTimedOutErrorState">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="errorState" />
  </view-state>
  <view-state id="userNameProvidedButInvalidErrorState">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="errorState" />
  </view-state>
  <view-state id="enteredUserNameInvalidErrorState">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="enterUserNameState" />
  </view-state>
  <view-state id="otpInvalidErrorState">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="enterOtpState" />
  </view-state>
  <view-state id="otpExpiredErrorState">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="enterOtpState" />
  </view-state>
  <view-state id="accountLockedOutErrorState">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="errorState" />
  </view-state>
  <view-state id="simAuthenticationTimedOutErrorState">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="errorState" />
  </view-state>
  <view-state id="invalidAuthenticationMechanismErrorState">
    <on-render>
      <render fragments="body" />
    </on-render>
    <transition
      on="proceed"
      to="errorState" />
  </view-state>
  <end-state id="errorState"/>
  <end-state id="success" view="externalRedirect:contextRelative:/"/>
</flow>

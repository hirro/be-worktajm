// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.arnellconsulting.tps.model;

import com.arnellconsulting.tps.model.CorporateDataOnDemand;
import com.arnellconsulting.tps.model.Customer;
import com.arnellconsulting.tps.model.CustomerDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CustomerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CustomerDataOnDemand: @Component;
    
    private Random CustomerDataOnDemand.rnd = new SecureRandom();
    
    private List<Customer> CustomerDataOnDemand.data;
    
    @Autowired
    CorporateDataOnDemand CustomerDataOnDemand.corporateDataOnDemand;
    
    public Customer CustomerDataOnDemand.getNewTransientCustomer(int index) {
        Customer obj = new Customer();
        setCountry(obj, index);
        setName(obj, index);
        setOrganisationalNumber(obj, index);
        setStreet(obj, index);
        setStreetNumber(obj, index);
        setZipCode(obj, index);
        return obj;
    }
    
    public void CustomerDataOnDemand.setCountry(Customer obj, int index) {
        String country = "country_" + index;
        obj.setCountry(country);
    }
    
    public void CustomerDataOnDemand.setName(Customer obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void CustomerDataOnDemand.setOrganisationalNumber(Customer obj, int index) {
        String organisationalNumber = "organisationalNumber_" + index;
        obj.setOrganisationalNumber(organisationalNumber);
    }
    
    public void CustomerDataOnDemand.setStreet(Customer obj, int index) {
        String street = "street_" + index;
        obj.setStreet(street);
    }
    
    public void CustomerDataOnDemand.setStreetNumber(Customer obj, int index) {
        String streetNumber = "streetNumber_" + index;
        obj.setStreetNumber(streetNumber);
    }
    
    public void CustomerDataOnDemand.setZipCode(Customer obj, int index) {
        String zipCode = "zipCode_" + index;
        obj.setZipCode(zipCode);
    }
    
    public Customer CustomerDataOnDemand.getSpecificCustomer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Customer obj = data.get(index);
        Long id = obj.getId();
        return Customer.findCustomer(id);
    }
    
    public Customer CustomerDataOnDemand.getRandomCustomer() {
        init();
        Customer obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Customer.findCustomer(id);
    }
    
    public boolean CustomerDataOnDemand.modifyCustomer(Customer obj) {
        return false;
    }
    
    public void CustomerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Customer.findCustomerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Customer' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Customer>();
        for (int i = 0; i < 10; i++) {
            Customer obj = getNewTransientCustomer(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
